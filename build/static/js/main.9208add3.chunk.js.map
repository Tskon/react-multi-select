{"version":3,"sources":["components/Select/index.js","App.js","serviceWorker.js","index.js"],"names":["Index","props","useState","searchValue","setSearchValue","searchRef","useRef","selectValues","values","setValues","activeOption","setActiveOption","isOptionsOpen","setOptionsOpenStatus","isReadyToDelete","setReadyToDeleteStatus","useEffect","wrapperRef","clickOutside","e","current","contains","target","window","addEventListener","removeEventListener","valuesForOptions","filter","value","isSearched","toLowerCase","includes","selectOptions","map","i","className","key","onClick","onMouseOver","selectedValues","selectedValue","length","ref","focus","onKeyDown","blur","slice","type","name","readOnly","onChange","onFocus","style","top","clientHeight","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9208add3.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport './Select.css'\n\nexport default function Index(props) {\n  const [searchValue, setSearchValue] = useState('')\n  const searchHandler = (e) => { setSearchValue(e.target.value) }\n  const searchRef = useRef()\n\n  const selectValues = props.values\n  const [values, setValues] = useState([])\n  const [activeOption, setActiveOption] = useState(0)\n  const [isOptionsOpen, setOptionsOpenStatus] = useState(false)\n  const [isReadyToDelete, setReadyToDeleteStatus] = useState(false)\n\n  const onWrapperClick = () => {\n    setOptionsOpenStatus(true)\n    searchRef.current.focus()\n  }\n\n  useEffect(() => {\n    if (searchValue) setOptionsOpenStatus(true)\n  }, [searchValue])\n\n  useEffect(() => {\n    setReadyToDeleteStatus(false)\n  }, [searchValue, values])\n\n  const wrapperRef = useRef()\n  useEffect(() => {\n    if (!isOptionsOpen) return setActiveOption(0)\n\n    const clickOutside = (e) => {\n      if (!wrapperRef.current || wrapperRef.current.contains(e.target)) {\n        return\n      }\n      setOptionsOpenStatus(false)\n      setReadyToDeleteStatus(false)\n    }\n\n    window.addEventListener('click', clickOutside)\n    return () => {\n      window.removeEventListener('click', clickOutside)\n    }\n  })\n\n  const valuesForOptions = selectValues.filter(value => {\n    const isSearched = !searchValue || value.toLowerCase().includes(searchValue.toLowerCase())\n    return !values.includes(value) && isSearched\n  })\n\n  const selectOptions = valuesForOptions.map((value, i) => (\n    <li\n      className={`\n        select-option\n        ${(i === activeOption) ? 'select-option-active' : ''}\n      `}\n      key={value}\n      onClick={() => {\n        setSearchValue('')\n        setValues([...values, value])\n      }}\n      onMouseOver={() => {setActiveOption(i)}}\n    >\n      {value}\n    </li>\n  ))\n\n  const selectedValues = values.map((selectedValue, i) => (\n    <button\n      className={`\n        selected-value\n        ${(isReadyToDelete && i === values.length - 1) ? 'ready-to-delete' : ''}\n      `}\n      key={selectedValue}\n      onClick={() => {\n        setValues(values.filter((value) => value !== selectedValue))\n      }}\n    >\n      {selectedValue}\n    </button>\n  ))\n\n  const keyHandler = (e) => {\n    switch (e.key) {\n      case 'ArrowUp':\n        if (!isOptionsOpen) {\n          setOptionsOpenStatus(true)\n          break\n        }\n        if (activeOption > 0)\n          setActiveOption(activeOption - 1)\n        else\n          setActiveOption(selectOptions.length - 1)\n        break\n\n      case 'ArrowDown':\n        if (!isOptionsOpen) {\n          setOptionsOpenStatus(true)\n          break\n        }\n        if (activeOption < selectOptions.length - 1)\n          setActiveOption(activeOption + 1)\n        else\n          setActiveOption(0)\n        break\n\n      case 'Escape':\n        setOptionsOpenStatus(false)\n        searchRef.current.blur()\n        break\n\n      case 'Tab':\n        setOptionsOpenStatus(false)\n        break\n\n      case 'Enter':\n        if (!isOptionsOpen) break\n        setValues([...values, valuesForOptions[activeOption]])\n        setOptionsOpenStatus(false)\n        break\n\n      case 'Backspace':\n        if (searchValue) break\n        if (isReadyToDelete) {\n          setValues([...values.slice(0, -1)])\n        } else {\n          setReadyToDeleteStatus(true)\n          setOptionsOpenStatus(false)\n        }\n        break\n    }\n  }\n\n  return (\n    <div\n      ref={wrapperRef}\n      className=\"select-input-wrapper\"\n      onClick={onWrapperClick}\n      onKeyDown={keyHandler}\n    >\n      <input\n        className=\"values-input\"\n        type=\"text\"\n        name=\"values\"\n        value={values}\n        readOnly\n      />\n      {selectedValues}\n      <input\n        ref={searchRef}\n        className=\"search-input\"\n        type=\"text\"\n        value={searchValue}\n        onChange={searchHandler}\n        onFocus={() => {setOptionsOpenStatus(true)}}\n      />\n\n      { isOptionsOpen &&\n      (<ul className=\"select-options\" style={{\n        top: wrapperRef.current.clientHeight\n      }}>\n        {(selectOptions.length) ? selectOptions : 'Ничего не найдено'}\n      </ul>)\n      }\n    </div>\n  )\n}\n","import React from 'react'\nimport './variables.css'\nimport './App.css'\nimport Select from './components/Select'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"select-box\">\n        <Select values={['Uganda', 'Canada', 'Greece', 'USA', 'England', 'Germany']} />\n        <br/>\n        <Select values={['Uganda2', 'Canada2', 'Greece2', 'USA2', 'England2', 'Germany2']} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}